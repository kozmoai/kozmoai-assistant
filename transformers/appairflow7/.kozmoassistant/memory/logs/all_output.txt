
2024-06-06T08:32:42.824201
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Represent files like so:

FILENAME
```
CODE
```

The following tokens must be replaced like so:
FILENAME is the lowercase combined path and file name including the file extension
CODE is the code in the file

Example representation of a file:

src/hello_world.py
```
print("Hello World")
```

Do not comment on what every file does. Please note that the code should be fully functional. No placeholders.


You will start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

Request: I need an airflow dag that lists all json files in a specific path in azure files share based on a regex match if the file name starts with `Refunds_`, then copies into local airflow and reads the latest file based on regex match `Refunds_` and a date in the file name, for example I have 4 files under the same path : Refunds_20240606.json / Refunds_20240605.json / Ref_20240607.json / Refunds_rejections_20240606.json, the code should read only one file Refunds_20240606.json, then the dag applies a specific schema to the loaded dataframe base on input schema like {'col1': 'string', 'col2': 'VARCHAR(10)', 'col3': 'FLOAT(64)'}  then writes the dataframe into a parquet file then uploads the parquet file into azure blob storage based an a partition YYYY/MM/DD created from the date in the file name

================================== Ai Message ==================================

To achieve the requested functionality, we need to create an Apache Airflow DAG that performs the following steps:

1. List all JSON files in a specific path in Azure File Share based on a regex match if the file name starts with `Refunds_`.
2. Copy the matched files into the local Airflow environment.
3. Read the latest file based on the regex match `Refunds_` and a date in the file name.
4. Apply a specific schema to the loaded DataFrame.
5. Write the DataFrame into a Parquet file.
6. Upload the Parquet file into Azure Blob Storage based on a partition `YYYY/MM/DD` created from the date in the file name.

We will use the following core classes and functions:
- `AzureFileShareHook`: Custom hook to interact with Azure File Share.
- `AzureBlobStorageHook`: Custom hook to interact with Azure Blob Storage.
- `list_json_files`: Function to list JSON files in Azure File Share.
- `copy_files_to_local`: Function to copy files from Azure File Share to local Airflow environment.
- `read_latest_file`: Function to read the latest file based on regex match.
- `apply_schema`: Function to apply a specific schema to the DataFrame.
- `write_to_parquet`: Function to write the DataFrame to a Parquet file.
- `upload_to_blob_storage`: Function to upload the Parquet file to Azure Blob Storage.

Let's start with the implementation:

### Directory Structure
```
airflow_dags/
├── dags/
│   └── refunds_processing_dag.py
├── hooks/
│   ├── azure_file_share_hook.py
│   └── azure_blob_storage_hook.py
├── utils/
│   ├── file_operations.py
│   └── dataframe_operations.py
└── requirements.txt
```

### requirements.txt
```
apache-airflow==2.3.0
azure-storage-file-share==12.4.1
azure-storage-blob==12.8.1
pandas==1.3.3
pyarrow==5.0.0
```

### airflow_dags/dags/refunds_processing_dag.py
```python
from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
from hooks.azure_file_share_hook import AzureFileShareHook
from hooks.azure_blob_storage_hook import AzureBlobStorageHook
from utils.file_operations import list_json_files, copy_files_to_local, read_latest_file
from utils.dataframe_operations import apply_schema, write_to_parquet

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'refunds_processing_dag',
    default_args=default_args,
    description='A DAG to process refund JSON files',
    schedule_interval=timedelta(days=1),
    start_date=datetime(2023, 1, 1),
    catchup=False,
)

def process_refunds():
    azure_file_share_hook = AzureFileShareHook(conn_id='azure_file_share_default')
    azure_blob_storage_hook = AzureBlobStorageHook(conn_id='azure_blob_storage_default')
    
    # List JSON files
    json_files = list_json_files(azure_file_share_hook, 'path/to/fileshare', r'^Refunds_.*\.json$')
    
    # Copy files to local
    local_files = copy_files_to_local(azure_file_share_hook, json_files, '/tmp/airflow/refunds')
    
    # Read the latest file
    latest_file = read_latest_file(local_files, r'^Refunds_(\d{8})\.json$')
    
    # Apply schema
    schema = {'col1': 'string', 'col2': 'VARCHAR(10)', 'col3': 'FLOAT(64)'}
    df = apply_schema(latest_file, schema)
    
    # Write to Parquet
    parquet_file = write_to_parquet(df, '/tmp/airflow/refunds/output.parquet')
    
    # Upload to Blob Storage
    upload_to_blob_storage(azure_blob_storage_hook, parquet_file, 'path/to/blobstorage')

process_refunds_task = PythonOperator(
    task_id='process_refunds',
    python_callable=process_refunds,
    dag=dag,
)

process_refunds_task
```

### airflow_dags/hooks/azure_file_share_hook.py
```python
from airflow.hooks.base_hook import BaseHook
from azure.storage.fileshare import ShareFileClient

class AzureFileShareHook(BaseHook):
    def __init__(self, conn_id):
        self.conn_id = conn_id
        self.connection = self.get_connection(conn_id)
        self.share_name = self.connection.extra_dejson.get('share_name')
        self.file_client = ShareFileClient.from_connection_string(
            self.connection.extra_dejson.get('connection_string'),
            share_name=self.share_name
        )

    def list_files(self, directory_path):
        return self.file_client.list_directories_and_files(directory_path)

    def download_file(self, file_path, local_path):
        with open(local_path, "wb") as file_handle:
            data = self.file_client.download_file(file_path)
            file_handle.write(data.readall())
```

### airflow_dags/hooks/azure_blob_storage_hook.py
```python
from airflow.hooks.base_hook import BaseHook
from azure.storage.blob import BlobServiceClient

class AzureBlobStorageHook(BaseHook):
    def __init__(self, conn_id):
        self.conn_id = conn_id
        self.connection = self.get_connection(conn_id)
        self.container_name = self.connection.extra_dejson.get('container_name')
        self.blob_service_client = BlobServiceClient.from_connection_string(
            self.connection.extra_dejson.get('connection_string')
        )

    def upload_file(self, local_path, blob_path):
        blob_client = self.blob_service_client.get_blob_client(container=self.container_name, blob=blob_path)
        with open(local_path, "rb") as data:
            blob_client.upload_blob(data)
```

### airflow_dags/utils/file_operations.py
```python
import re
import os
from datetime import datetime

def list_json_files(azure_file_share_hook, directory_path, regex_pattern):
    files = azure_file_share_hook.list_files(directory_path)
    return [file['name'] for file in files if re.match(regex_pattern, file['name'])]

def copy_files_to_local(azure_file_share_hook, files, local_directory):
    if not os.path.exists(local_directory):
        os.makedirs(local_directory)
    local_files = []
    for file in files:
        local_path = os.path.join(local_directory, os.path.basename(file))
        azure_file_share_hook.download_file(file, local_path)
        local_files.append(local_path)
    return local_files

def read_latest_file(files, regex_pattern):
    latest_date = None
    latest_file = None
    for file in files:
        match = re.match(regex_pattern, os.path.basename(file))
        if match:
            file_date = datetime.strptime(match.group(1), '%Y%m%d')
            if not latest_date or file_date > latest_date:
                latest_date = file_date
                latest_file = file
    return latest_file
```

### airflow_dags/utils/dataframe_operations.py
```python
import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq

def apply_schema(file_path, schema):
    df = pd.read_json(file_path)
    for col, dtype in schema.items():
        if dtype.lower() == 'string':
            df[col] = df[col].astype(str)
        elif dtype.lower().startswith('varchar'):
            df[col] = df[col].astype(str)
        elif dtype.lower().startswith('float'):
            df[col] = df[col].astype(float)
    return df

def write_to_parquet(df, output_path):
    table = pa.Table.from_pandas(df)
    pq.write_table(table, output_path)
    return output_path
```

This concludes a fully working implementation.
