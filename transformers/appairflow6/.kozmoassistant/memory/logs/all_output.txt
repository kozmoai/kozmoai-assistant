
2024-06-06T08:23:35.730989
================================ System Message ================================

You will get instructions for code to write.
You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.
Think step by step and reason yourself to the correct decisions to make sure we get it right.
First lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.

You will output the content of each file necessary to achieve the goal, including ALL code.
Represent files like so:

FILENAME
```
CODE
```

The following tokens must be replaced like so:
FILENAME is the lowercase combined path and file name including the file extension
CODE is the code in the file

Example representation of a file:

src/hello_world.py
```
print("Hello World")
```

Do not comment on what every file does. Please note that the code should be fully functional. No placeholders.


You will start with the "entrypoint" file, then go to the ones that are imported by that file, and so on.
Please note that the code should be fully functional. No placeholders.

Follow a language and framework appropriate best practice file naming convention.
Make sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.
Ensure to implement all code, if you are unsure, write a plausible implementation.
Include module dependency or package manager dependency definition file.
Before you finish, double check that all parts of the architecture is present in the files.

When you are done, write finish with "this concludes a fully working implementation".

Useful to know:
Almost always put different classes in different files.
Always use the programming language the user asks for.
For Python, you always create an appropriate requirements.txt file.
For NodeJS, you always create an appropriate package.json file.
Always add a comment briefly describing the purpose of the function definition.
Add comments explaining very complex bits of logic.
Always follow the best practices for the requested languages for folder/file structure and how to package the project.


Python toolbelt preferences:
- pytest
- dataclasses


================================ Human Message =================================

Request: I need an airflow dag that lists all json files in a specific path in azure files share based on a regex match if the file name starts with `Refunds_`, then reads the latest file based on regex match `Refunds_` and a date in the file name, for example I have 4 files under the same path : Refunds_20240606.json / Refunds_20240605.json / Ref_20240607.json / Refunds_rejections_20240606.json, the code should read only one file Refunds_20240606.json, then applies a specific schema to the loaded dataframe base on an input schema from yaml file  then writes the dataframe into a parquet in azure blob storage based an a partition YYYY/MM/DD created from the date in the file name

================================== Ai Message ==================================

To achieve the requested functionality, we will create an Apache Airflow DAG that performs the following steps:

1. Lists all JSON files in a specific path in Azure File Share based on a regex match if the file name starts with `Refunds_`.
2. Reads the latest file based on the regex match `Refunds_` and a date in the file name.
3. Applies a specific schema to the loaded DataFrame based on an input schema from a YAML file.
4. Writes the DataFrame into a Parquet file in Azure Blob Storage based on a partition `YYYY/MM/DD` created from the date in the file name.

We will use the following core classes and functions:
- `AzureFileShareHook`: A custom hook to interact with Azure File Share.
- `AzureBlobStorageHook`: A custom hook to interact with Azure Blob Storage.
- `list_json_files`: A function to list JSON files in Azure File Share.
- `read_latest_file`: A function to read the latest JSON file based on the regex match.
- `apply_schema`: A function to apply a schema to the DataFrame.
- `write_to_parquet`: A function to write the DataFrame to Parquet in Azure Blob Storage.

We will also create the necessary Airflow DAG and tasks to orchestrate these steps.

Let's start with the implementation:

### File: dags/azure_refunds_dag.py
```python
from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
from azure_file_share_hook import AzureFileShareHook
from azure_blob_storage_hook import AzureBlobStorageHook
import pandas as pd
import yaml
import re
import os

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2023, 10, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'azure_refunds_dag',
    default_args=default_args,
    description='A DAG to process Refunds JSON files from Azure File Share and write to Azure Blob Storage',
    schedule_interval=timedelta(days=1),
)

def list_json_files(**kwargs):
    azure_file_share_hook = AzureFileShareHook()
    files = azure_file_share_hook.list_files()
    json_files = [f for f in files if re.match(r'^Refunds_.*\.json$', f)]
    return json_files

def read_latest_file(json_files, **kwargs):
    latest_file = max(json_files, key=lambda f: re.search(r'Refunds_(\d{8})\.json$', f).group(1))
    azure_file_share_hook = AzureFileShareHook()
    file_content = azure_file_share_hook.read_file(latest_file)
    return latest_file, file_content

def apply_schema(file_content, **kwargs):
    schema_path = os.path.join(os.path.dirname(__file__), 'schema.yaml')
    with open(schema_path, 'r') as schema_file:
        schema = yaml.safe_load(schema_file)
    df = pd.read_json(file_content)
    df = df.astype(schema)
    return df

def write_to_parquet(df, latest_file, **kwargs):
    date_str = re.search(r'Refunds_(\d{8})\.json$', latest_file).group(1)
    year, month, day = date_str[:4], date_str[4:6], date_str[6:8]
    partition_path = f'{year}/{month}/{day}'
    azure_blob_storage_hook = AzureBlobStorageHook()
    azure_blob_storage_hook.write_parquet(df, partition_path)

list_files_task = PythonOperator(
    task_id='list_json_files',
    python_callable=list_json_files,
    provide_context=True,
    dag=dag,
)

read_latest_file_task = PythonOperator(
    task_id='read_latest_file',
    python_callable=read_latest_file,
    provide_context=True,
    op_args=['{{ ti.xcom_pull(task_ids="list_json_files") }}'],
    dag=dag,
)

apply_schema_task = PythonOperator(
    task_id='apply_schema',
    python_callable=apply_schema,
    provide_context=True,
    op_args=['{{ ti.xcom_pull(task_ids="read_latest_file")[1] }}'],
    dag=dag,
)

write_to_parquet_task = PythonOperator(
    task_id='write_to_parquet',
    python_callable=write_to_parquet,
    provide_context=True,
    op_args=['{{ ti.xcom_pull(task_ids="apply_schema") }}', '{{ ti.xcom_pull(task_ids="read_latest_file")[0] }}'],
    dag=dag,
)

list_files_task >> read_latest_file_task >> apply_schema_task >> write_to_parquet_task
```

### File: plugins/azure_file_share_hook.py
```python
from airflow.hooks.base_hook import BaseHook
from azure.storage.fileshare import ShareServiceClient
import os

class AzureFileShareHook(BaseHook):
    def __init__(self, conn_id='azure_file_share_default'):
        self.conn_id = conn_id
        self.connection = self.get_connection(conn_id)
        self.service_client = ShareServiceClient.from_connection_string(self.connection.extra_dejson['connection_string'])
        self.share_name = self.connection.extra_dejson['share_name']
        self.directory_name = self.connection.extra_dejson['directory_name']

    def list_files(self):
        file_list = []
        file_client = self.service_client.get_directory_client(self.share_name, self.directory_name)
        for item in file_client.list_directories_and_files():
            if item['is_directory'] == False:
                file_list.append(item['name'])
        return file_list

    def read_file(self, file_name):
        file_client = self.service_client.get_file_client(self.share_name, os.path.join(self.directory_name, file_name))
        download = file_client.download_file()
        return download.readall().decode('utf-8')
```

### File: plugins/azure_blob_storage_hook.py
```python
from airflow.hooks.base_hook import BaseHook
from azure.storage.blob import BlobServiceClient
import pandas as pd
import io

class AzureBlobStorageHook(BaseHook):
    def __init__(self, conn_id='azure_blob_storage_default'):
        self.conn_id = conn_id
        self.connection = self.get_connection(conn_id)
        self.service_client = BlobServiceClient.from_connection_string(self.connection.extra_dejson['connection_string'])
        self.container_name = self.connection.extra_dejson['container_name']

    def write_parquet(self, df, partition_path):
        buffer = io.BytesIO()
        df.to_parquet(buffer, index=False)
        buffer.seek(0)
        blob_client = self.service_client.get_blob_client(container=self.container_name, blob=f'{partition_path}/data.parquet')
        blob_client.upload_blob(buffer, overwrite=True)
```

### File: dags/schema.yaml
```yaml
# Define the schema for the DataFrame
column1: int
column2: float
column3: str
# Add more columns as needed
```

### File: requirements.txt
```
apache-airflow==2.2.3
azure-storage-file-share==12.5.0
azure-storage-blob==12.8.1
pandas==1.3.3
pyyaml==5.4.1
```

This concludes a fully working implementation.
